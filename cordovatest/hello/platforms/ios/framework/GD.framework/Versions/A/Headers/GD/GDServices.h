/*
 * (c) 2017 BlackBerry Limited. All rights reserved.
 * 
 * The documentation in this file is also used elsewhere.
 */

#ifndef __GD_SERVICES_H__
#define __GD_SERVICES_H__

#import <Foundation/Foundation.h>
#import "GDPortability.h"

/* \cond DOXYGEN_IGNORE */
#if __has_extension(attribute_deprecated_with_message)
#   define DEPRECATE_BRINGTOFRONTWITHOUTCOMPLETION __attribute((deprecated("Use bringToFront:completion:error:")))
#else
#   define DEPRECATE_BRINGTOFRONTWITHOUTCOMPLETION __attribute((deprecated))
#endif
/* \endcond */

GD_NS_ASSUME_NONNULL_BEGIN

/** \defgroup iccerrors AppKinetics Errors
 * These constants can be used for handling or generating errors when
 * using AppKinetics.
 *
 * Errors can be generated by the AppKinetics system itself, or by service
 * provider applications working within the system. See the individual error
 * codes' documentation for a description of when each code is to be used, and
 * note the following.
 *
 * The <em>NotFound</em> codes are for use when the service, service version, or
 * method in a request is not offered by the provider application to which the
 * request was sent.
 * 
 * The <em>Disabled</em> codes are for use when the service, service version,
 * and method are generally offered by the provider application, but support is
 * currently disabled by a policy setting or other condition that is, in
 * principle, temporary.
 * \{
 */

/** Error domain for AppKinetics errors.
 * 
 * This domain is for generic AppKinetics service errors. Note that
 * this domain isn't used for errors that are specific to a service, nor for
 * errors that are specific to a service provider application.
 * 
 * For an overall description of AppKinetics see the \reflink GDService GDService class reference\endlink.
 *
 * An <tt>NSError</tt> with this value as its domain could be encountered:
 * - In the <tt>error</tt> parameter following a call to
 *   \reflink GDServiceClient::sendTo:withService:withVersion:withMethod:withParams:withAttachments:bringServiceToFront:requestID:error: sendTo (GDServiceClient) \endlink where the request was not accepted by the
 *   AppKinetics system.
 * - In the <tt>error</tt> parameter following a call to
 *   \reflink GDService::replyTo:withParams:bringClientToFront:withAttachments:requestID:error: replyTo (GDService) \endlink where the response was not accepted by the
 *   AppKinetics system.
 * - As the <tt>params</tt> object passed to an invocation of
 *   \reflink GDServiceClientDelegate::GDServiceClientDidReceiveFrom:withParams:withAttachments:correspondingToRequestID: GDServiceClientDidReceiveFrom \endlink where a request that had
 *   been accepted subsequently failed in the system.
 * .
 * Of the above, <tt>sendTo:</tt> and
 * <tt>GDServiceClientDidReceiveFrom:</tt> are part of the service consumer
 * side of the AppKinetics programming interface, and <tt>replyTo:</tt> is part
 * of the service provider side.
 */
extern NSString* const GDServicesErrorDomain;

/** A general AppKinetics error occurred.
 */
extern NSInteger const GDServicesErrorGeneral;

/** Application's process has been suspended by system.
 */
extern NSInteger const GDServicesErrorProcessSuspended;

/** The service consumer sent a request to an application that couldn't be found
 *  on the device or computer.
 */
extern NSInteger const GDServicesErrorApplicationNotFound; 

/** The service consumer sent a request that specified a service that isn't
 *  supported by the service provider.
 */
extern NSInteger const GDServicesErrorServiceNotFound;

/** The service consumer sent a request that specified a service version that
 *  isn't supported by the service provider.
 */
extern NSInteger const GDServicesErrorServiceVersionNotFound;

/** The service consumer sent a request that specified a method that isn't
 *  supported by the service provider.
 */
extern NSInteger const GDServicesErrorMethodNotFound;

/** The service consumer sent a request to an application that couldn't be
 *  unlocked.
 */
extern NSInteger const GDServicesErrorNotAllowed;

/** The application attempted to utilize an unsupported type as a service
 *  parameter, either in a service request or in a service response.
 */
extern NSInteger const GDServicesErrorInvalidParams;

/** The application attempted to establish a connection but couldn't find a
 *  valid X509 certificate.
 */
extern NSInteger const GDServicesErrorCertificateNotFound;

/** The service consumer sent a request that specified a method that has been
 *  disabled in the service provider.
 */
extern NSInteger const GDServicesMethodDisabled;

/** The service consumer sent a request that specified a service version that
 *  has been disabled in the service provider.
 */
extern NSInteger const GDServicesVersionDisabled;

/** The service consumer sent a request that specified a service that has been
 *  disabled in the service provider.
 */
extern NSInteger const GDServicesServiceDisabled;

/** The application attempted to establish a connection to the application that
 *  was activated for a different user.
 */
extern NSInteger const GDServicesErrorEnterpriseUserNotMatch;

/** \}
 */

/** \defgroup iccconstants AppKinetics Miscellaneous Constants
 * These miscellaneous constants are part of the AppKinetics programming
 * interface.
 *
 * For an overall description of AppKinetics see the \reflink GDService GDService class reference\endlink.
 * 
 * \{
 */

/** Constants for specifying foreground execution preference.
 * 
 * This enumeration represents a preference for which application is to execute
 * in foreground. The <tt>option</tt> parameter of the
 * \reflink GDServiceClient::sendTo:withService:withVersion:withMethod:withParams:withAttachments:bringServiceToFront:requestID:error: sendTo (GDServiceClient) \endlink and \reflink GDService::replyTo:withParams:bringClientToFront:withAttachments:requestID:error: replyTo (GDService) \endlink functions
 * always takes one of these values. See function references for details.
 */

typedef NS_ENUM(NSInteger, GDTForegroundOption)
{
    /** The current application is to be in the foreground. */
    GDEPreferMeInForeground,
    
    /** The other application is to be in the foreground. */
    GDEPreferPeerInForeground,
    
    /** There is no preference for which application is in foreground. */
    GDENoForegroundPreference
    
};

/** BlackBerry Dynamics service ID for Front Request.
 * 
 * Use this constant to send or identify a front request. See under Foreground
 * Execution and Front Request Programming Interface in the
 * \reflink GDService GDService class reference\endlink.
 */
extern NSString* const GDFrontRequestService;

/** Method name for the Front Request API.
 * 
 * Use this constant to identify the method in a front request. See under
 * Foreground Execution and Front Request Programming Interface in the
 * \reflink GDService GDService class reference\endlink.
 */
extern NSString* const GDFrontRequestMethod;

/** \}
 */

/** Handler for AppKinetics consumer events.
 * 
 * Responses to AppKinetics service requests are handled by creating a
 * class that implements this protocol.
 *
 * This class is part of the service consumer side of the AppKinetics
 * programming interface.
 *
 * The \reflink GDServiceClientDelegate::GDServiceClientDidReceiveFrom:withParams:withAttachments:correspondingToRequestID: GDServiceClientDidReceiveFrom \endlink callback would be
 * invoked after the application had sent a service request to a service
 * provider, and the provider had responded or an error had occurred.
 * 
 * @see The \reflink GDService GDService class reference\endlink for an overall description of AppKinetics.
 *
 * This class also includes a callback that is invoked when transmission of a
 * service request completes.
 *
 * <h3>Callback Invocation Sequence</h3>
 * The callbacks in this class will be invoked in the following sequence when a
 * service response is received.
 * -# \link GDServiceClientDelegate::GDServiceClientWillStartReceivingFrom:numberOfAttachments:forRequestID:
 *    GDServiceWillStartReceivingFrom:numberOfAttachments:forRequestID:\endlink
 *    once, if the service request has any file attachments.
 * -# \link GDServiceClientDelegate::GDServiceClientWillStartReceivingFrom:attachmentPath:fileSize:forRequestID:
 *    GDServiceWillStartReceivingFrom:attachmentPath:fileSize:forRequestID:\endlink
 *    once for each file attachment.
 * -# \reflink GDServiceClientDelegate::GDServiceClientDidReceiveFrom:withParams:withAttachments:correspondingToRequestID: GDServiceClientDidReceiveFrom \endlink once.
 * .
 * The first two of these callbacks enable the application to display a
 * receiving status in its user interface. No action should be taken on any
 * attachment files until the last callback,
 * \reflink GDServiceClientDelegate::GDServiceClientDidReceiveFrom:withParams:withAttachments:correspondingToRequestID: GDServiceClientDidReceiveFrom \endlink.
 */
@protocol GDServiceClientDelegate<NSObject>
@required
/** AppKinetics service response callback.
 * 
 * This callback is invoked when a response is received to an
 * AppKinetics service request. The parameters give the details of the service
 * response.
 * 
 * For an overall description of AppKinetics see the \reflink GDService GDService class reference\endlink.
 * 
 * See under Callback Invocation Sequence, above, for the position of this
 * callback in the order of service response callbacks.
 * 
 * A service response may be received in relation to a call to
 * \reflink GDServiceClient::sendTo:withService:withVersion:withMethod:withParams:withAttachments:bringServiceToFront:requestID:error: sendTo (GDServiceClient) \endlink that was accepted by the AppKinetics system.
 *
 * The response can include file attachments and a results object from the
 * provider application. Check the type of the results object to determine
 * whether the service request succeeded.
 *
 * If the results object is of type
 * <tt>NSError</tt> then the service request
 * failed.
 * The error domain of the object will either be the
 * <tt>GDServicesErrorDomain</tt> value, in the case of a generic
 * AppKinetics failure, or a value that is specific to the service or to the
 * provider application. In any case, the <tt>NSError</tt> object should have a
 * suitable error code, a <tt>localizedDescription</tt>, and possibly additional
 * data in its <tt>userInfo</tt> dictionary. See also the <a
 *     href="https://developer.apple.com/reference/foundation/nserror"
 *     target="_blank"
 * >NSError class reference</a> on the apple.com developer website for the full
 * programming interface.
 * 
 * If the results object isn't of type
 * <tt>NSError</tt> then the service
 * request succeeded. In that case the results object will be of a valid service
 * parameter type, as defined under Service Parameters in the
 * \reflink GDService GDService class reference\endlink.
 * 
 * @param application <tt>NSString</tt> containing the native application identifier of
 *                    the provider application to which the original service
 *                    request was sent.
 *
 * @param params The results object, as returned by the provider application.
 * 
 * @param attachments <tt>NSArray</tt> of <tt>NSString</tt>
 *                    objects containing the paths of files that were attached
 *                    to the service response. See under File Attachments in the
 *                    \reflink GDService GDService class reference\endlink.
 * 
 * @param requestID <tt>NSString</tt> containing the ID assigned to the original
 *                  service request. An application that makes multiple
 *                  concurrent service requests can use this value to tie the
 *                  response back to the original request. The application must
 *                  have retained the ID from when \reflink GDServiceClient::sendTo:withService:withVersion:withMethod:withParams:withAttachments:bringServiceToFront:requestID:error: sendTo (GDServiceClient) \endlink
 *                  was originally called.
 */
- (void) GDServiceClientDidReceiveFrom:(NSString*)application
                            withParams:(id)params
                       withAttachments:(GD_NSArray(NSString *) *)attachments
              correspondingToRequestID:(NSString*)requestID;

@optional
/** Service request file attachment transmission start callback.
 * 
 * This callback is invoked when delivery of a service request file
 * attachment by the AppKinetics system starts. The path of the file is passed
 * as a parameter.
 *
 * Invocation of this callback notifies the application that the AppKinetics
 * system has started transferring the data in the file to the recipient of the
 * service request.
 *
 * The function that is invoked could display a sending status in its user
 * interface. The sending status could be cleared on receipt of the
 * <tt>GDServiceClientDidFinishSendingTo:</tt>
 * callback.
 *
 * @see \reflink GDServiceClient::sendTo:withService:withVersion:withMethod:withParams:withAttachments:bringServiceToFront:requestID:error: sendTo (GDServiceClient) \endlink for details of sending service requests.
 * 
 * @param application <tt>NSString</tt> containing the native application identifier of
 *                    the recipient of the file.
 * 
 * @param filename <tt>NSString</tt> containing the path in the secure store of the
 *                 file that is now being sent.
 *
 * @param requestID <tt>NSString</tt> containing the unique identifier of the service
 *                  request to which the file is attached.
 */
- (void) GDServiceClientDidStartSendingTo:(NSString*)application withFilename:(NSString*)filename correspondingToRequestID:(NSString*)requestID;

@optional
/** Service request transmission complete callback.
 * 
 * This callback is invoked when the delivery of an AppKinetics service
 * request completes.
 *
 * Invocation of this callback notifies the application that:
 * - Any files that were attached to the service request have been copied to the
 *   secure store of the service provider.
 * - An independent copy of the parameters of the request, if any, has been made
 *   available to the service provider.
 * .
 * The function that is invoked can delete or modify any of the original
 * file attachments, and free any resources used to hold the request parameters.
 *
 * @see \reflink GDServiceClient::sendTo:withService:withVersion:withMethod:withParams:withAttachments:bringServiceToFront:requestID:error: sendTo (GDServiceClient) \endlink for details of sending service requests.
 * 
 * @param requestID <tt>NSString</tt> containing the unique identifier of the service
 *                  request whose sending has completed.
 * 
 * @param attachments <tt>NSArray</tt> of <tt>NSString</tt>
 *                    objects containing the paths of any files that were
 *                    attached to the service request.
 *
 * @param params Reference to the parameters object of the service request.
 *
 * @param application <tt>NSString</tt> containing the native application identifier of
 *                    the application to which the service request was sent.
 */
- (void) GDServiceClientDidFinishSendingTo:(NSString*)application withAttachments:(GD_NSArray(NSString *) *)attachments withParams:(id)params correspondingToRequestID:(NSString*)requestID;

@optional
/** Service response file attachments transmission start callback.
 * 
 * This callback is invoked when file attachments are about to be
 * received through the AppKinetics system. The number of files that are about
 * to be received is passed as a parameter.
 *
 * This callback will be invoked once per service response that has attachments.
 * See under Callback Invocation Sequence, above, for its position in the order
 * of service response callbacks.
 * 
 * The function that is invoked could display a receiving status in its user
 * interface. The status could be cleared on receipt of the
 * \reflink GDServiceClientDelegate::GDServiceClientDidReceiveFrom:withParams:withAttachments:correspondingToRequestID: GDServiceClientDidReceiveFrom \endlink callback.
 * 
 * @param application <tt>NSString</tt> containing the native application identifier of
 *                    the provider application that sent the service response to
 *                    which the files are attached.
 *
 * @param attachments
 *         <tt>NSUInteger</tt> number of files that are
 *         about to be received, always one or more. This callback isn't invoked
 *         for service responses that have no attachments.
 *
 * @param requestID <tt>NSString</tt> containing the unique identifier of the original 
 *                  service request, the response to which the files are
 *                  attached.
 */
- (void) GDServiceClientWillStartReceivingFrom:(NSString*)application
                           numberOfAttachments:(NSUInteger)attachments
                                  forRequestID:(NSString*)requestID;

@optional
/** Service response individual file attachment transmission start callback.
 * 
 * This callback is invoked when an individual file attachment is about
 * to be received through the AppKinetics system. The path and size of the file
 * that is about to be received are passed as parameters.
 *
 * This callback will be invoked once per attachment. See under Callback
 * Invocation Sequence, above, for its position in the order of service response
 * callbacks.
 *
 * The function that is invoked could display or update a receiving status
 * in its user interface. The status could be cleared on receipt of the
 * \reflink GDServiceClientDelegate::GDServiceClientDidReceiveFrom:withParams:withAttachments:correspondingToRequestID: GDServiceClientDidReceiveFrom \endlink callback.
 * 
 * @param application <tt>NSString</tt> containing the native application identifier of
 *                    the provider application that sent the service response
 *                    to which the file is attached.
 *                    
 * @param path <tt>NSString</tt> containing the path of the attachment. The value will
 *             be the same as one of the elements in the <tt>attachments</tt>
 *             parameter passed to the subsequent
 *             \reflink GDServiceClientDelegate::GDServiceClientDidReceiveFrom:withParams:withAttachments:correspondingToRequestID: GDServiceClientDidReceiveFrom \endlink invocation.
 *
 * @param size <tt>NSNumber</tt> representing the size 
 *             of the file in bytes. The value will be an <tt>unsigned
 *             long long</tt>.
 *
 * @param requestID <tt>NSString</tt> containing the unique identifier of the original 
 *                  service request, the response to which the files are
 *                  attached.
 */
- (void) GDServiceClientWillStartReceivingFrom:(NSString*)application
                                attachmentPath:(NSString*)path
                                      fileSize:(NSNumber*)size
                                  forRequestID:(NSString*)requestID;

@end


/** AppKinetics service consumer.
 * 
 * This class is mandatory for AppKinetics service consumer
 * applications. This class also includes the programming interface for sending
 * AppKinetics service requests.
 *
 * To utilize this interface, the application must meet the requirements listed
 * under Service Consumer Requirements, below.
 * 
 * For an overall description of AppKinetics see the \reflink GDService GDService class reference\endlink.
 * 
 * The functions in this programming interface cannot be used until
 * BlackBerry Dynamics authorization processing is
 * complete, see under \reflink GDiOS::authorize: authorize (GDiOS) \endlink.
 * 
 * @see \reflink  iccerrors AppKinetics Errors \endlink
 * 
 * <h3>Service Consumer Requirements</h3>
 * To function as an AppKinetics service consumer, a BlackBerry Dynamics
 * application must:
 * - Instantiate a single object of the <tt>GDServi</tt><tt>ceClient</tt> class.
 * - Set the delegate to an instance of a class that
 *   implements the \reflink GDServiceClientDelegate GDServiceClientDelegate \endlink
 *   protocol, typically
 *   <tt>self</tt>.
 * - Register the AppKinetics URL type
 *   on the device. This will normally be achieved by utilizing the mandatory
 *   BlackBerry Dynamics build-time configuration, as detailed on the
 *   \ref BuildTimeConfiguration page.
 * .
 * Note that an application that consumes multiple services still instantiates
 * only a single object of this class. The delegate
 * of the object handles responses from all the services that the application
 * consumes.
 */
@interface GDServiceClient : NSObject

/** Send a service request.
 * 
 * Call this function to send an AppKinetics service request. The
 * request includes a method name, and can include service parameters and file
 * attachments to be conveyed to the provider application.
 *
 * For an overall description of AppKinetics see the \reflink GDService GDService class reference\endlink.
 * 
 * The AppKinetics system will assign a unique identifier to the service request
 * and make this available to the application. This value will also be returned
 * with any response to the request. An application that makes multiple
 * concurrent requests can use the request identifier to match responses with
 * requests.
 *
 * This method may perform storage or network I/O, and therefore <b>should not
 * be called on the UI thread</b>.
 *
 * @param application <tt>NSString</tt> containing the
 *                    native bundle identifier
 *                    of the service provider application.
 * A suitable value could be obtained from the address field of a
 * <tt>GDServiceProvider</tt> object returned by the \reflink GDiOS::getServiceProvidersFor:andVersion:andServiceType: getServiceProvidersFor: (GDiOS) \endlink
 * function.
 *
 * @param service <tt>NSString</tt> containing the identifier of the service to which
 *                the request is being sent. The value should correspond to a
 *                service that the service provider application offers.
 *
 * @param version <tt>NSString</tt> containing the version of the service being
 *                requested. The value should correspond to a version of service
 *                that the service provider application offers.
 *
 * @param method <tt>NSString</tt> containing the name of the method, within the
 *               service, that is being requested. The value should correspond
 *               to the name of a method that the service provider application
 *               offers.
 *
 * @param params The service parameters object for the request. See under
 *               Service Parameters in the \reflink GDService GDService class reference\endlink.
 *
 * @param attachments <tt>NSArray</tt> of <tt>NSString</tt>
 *                    objects containing the paths of files in the
 *                    BlackBerry Dynamics secure file system that are to
 *                    be attached to the request. See under File Attachments in
 *                    the \reflink GDService GDService class reference\endlink.
 *
 * @param option <tt>GDTForegroundOption</tt> specifying the foreground execution preference
 *               for processing of the request:\n
 *               <tt>GDEPreferPeerInForeground</tt> for the provider application being in the
 *               foreground.\n
 *               <tt>GDEPreferMeInForeground</tt> for this application being in the
 *               foreground.\n
 *               <tt>GDENoForegroundPreference</tt> to specify that there is no
 *               preference.\n
 *               See also the notes under Foreground Execution in the
 *               \reflink GDService GDService class reference\endlink.
 *
 * @param requestID Location of a an <tt>NSString</tt> pointer for returning the
 *                  unique identifier assigned to the request by the AppKinetics
 *                  system.
 *
 * @param error For returning an <tt>NSError</tt> object if an error occurs. If <tt>nil</tt>, no object will be returned.
 *
 * @return <tt>YES</tt> if the request was accepted by the AppKinetics system. The
 *         result of the service request could be notified to the application by
 *         invocation of its <tt>GDServiceClientDidReceiveFrom</tt> callback,
 *         depending on the service, and whether the request is able to be
 *         delivered. See \ref iccerrors.
 * @return <tt>NO</tt> Otherwise. The <tt>error</tt> location, if provided, will
 *         be set to point to an <tt>NSError</tt> object with details of the
 *         error condition.
 */
+ (BOOL) sendTo:(NSString*)application
    withService:(NSString*)service
    withVersion:(NSString*)version
     withMethod:(NSString*)method
     withParams:(GD_NSNULLABLE id)params
withAttachments:(GD_NSNULLABLE GD_NSArray(NSString *) *)attachments
bringServiceToFront:(GDTForegroundOption)option
      requestID:(NSString * GD_NSNULLABLE_POINTER * GD_NSNULLABLE_POINTER)requestID
          error:(NSError**)error;

/** Cancel a service request.
 * 
 * Call this function to cancel AppKinetics service requests. The
 * application can only cancel requests that it sent, not requests sent by other
 * applications.
 *
 * This function can be used to cancel a single service request. Specify the
 * unique identifier of the request, which will have been generated when
 * \reflink GDServiceClient::sendTo:withService:withVersion:withMethod:withParams:withAttachments:bringServiceToFront:requestID:error: sendTo (GDServiceClient) \endlink was called.
 *
 * This function can also be used to cancel all service requests addressed
 * to a specific application.
 *
 * Cancellation of a request can succeed or fail. If cancellation succeeds:
 * - The
 *   <tt>GDServiceClientDidFinishSendingTo:</tt>
 *   callback in the sending application isn't subsequently invoked.
 * - The \reflink GDServiceClientDelegate::GDServiceClientDidReceiveFrom:withParams:withAttachments:correspondingToRequestID: GDServiceClientDidReceiveFrom \endlink callback in the
 *   receiving application won't be invoked.
 * .
 * Cancellation will fail if the service request has already been delivered, in
 * which case the above callback invocations would take place.
 *
 * @param requestID <tt>NSString</tt> containing the identifier of the request to be
 *                  cancelled, or <tt>nil</tt> to cancel all requests to the
 *                  specified recipient.
 *
 * @param application <tt>NSString</tt> containing the native application identifier of
 *                    the recipient to which the request or requests were sent.
 *
 * @return <tt>YES</tt> if one or more requests were cancelled.
 * @return <tt>NO</tt> otherwise. This function returns <tt>NO</tt> if there is
 *                   no service request that matches the specified values, or if
 *                   none of the requests that match could be cancelled.
 */
+ (BOOL) cancelRequest:(NSString*)requestID toApplication:(NSString*)application;

/** Bring another application to the foreground.
 *
 * Call this function to bring another application to the
 * foreground. This would typically be used when a service provider application
 * has requested foreground execution to process a request that has already been
 * sent. See under Foreground Execution in the \reflink GDService GDService class reference\endlink for
 * details.
 * 
This function is asynchronous. Success or failure is returned by
 * invocation of a code block specified in the <tt>completion</tt> parameter.
 * The block will receive one parameter of type <tt>BOOL</tt> and should have no
 * return value. It may or may not be executed on the main thread.
 *
 * Don't use this function outside the context of service request
 * processing.
 *
 * @param application <tt>NSString</tt> containing the native application identifier of
 *                    the application to be brought to the foreground.
 *                    
 * @param completion Code block to execute when the operation completes or
 *                   fails. It receives one parameter:\n
 *                   <tt>YES</tt> if the other application was brought to the
 *                   foreground, based on the return code from the native
 *                   layer.\n
 *                   <tt>NO</tt> otherwise.
 *
 * @param error For returning an <tt>NSError</tt> object if an error occurs. If <tt>nil</tt>, no object will be returned.
 * @return <tt>YES</tt> if the <tt>completion</tt> code block will be invoked.
 * @return <tt>NO</tt> otherwise.
 */
+ (BOOL) bringToFront:(GD_NSNON_NULL NSString*)application completion:( void(^)(BOOL) )completion error:(NSError**)error;

/** Bring another application to the foreground (deprecated).
 * 
 * \deprecated This function is deprecated and will be removed in a future
 * release. Use \reflink GDServiceClient::bringToFront:completion:error: bringToFront: \endlink with a completion block
 * instead.
 * 
 * Call this function to bring another application to the
 * foreground. This would typically be used when a service provider application
 * has requested foreground execution to process a request that has already been
 * sent. See under Foreground Execution in the \reflink GDService GDService class reference\endlink for
 * details.
 * 
Don't use this function outside the context of service request
 * processing.
 *
 * @param application <tt>NSString</tt> containing the native application identifier of
 *                    the application to be brought to the foreground.
 * @param error For returning an <tt>NSError</tt> object if an error occurs. If <tt>nil</tt>, no object will be returned.
 * @return <tt>YES</tt> if the specified application was brought to the foreground,
 *         based on the return code from the native layer.
 * @return <tt>NO</tt> otherwise.
 */
+ (BOOL) bringToFront:(NSString*)application error:(NSError**)error DEPRECATE_BRINGTOFRONTWITHOUTCOMPLETION;

/** Handler for responses to service requests.
 * 
 * When a response to an AppKinetics service request is received, the
 * BlackBerry Dynamics runtime dispatches an event to a callback function
 * within the application.
 * 
 * Set this property to an instance of a class in the application that contains
 * the code for the required callback function
 * , i.e. a class that implements
 * the \reflink GDServiceClientDelegate GDServiceClientDelegate \endlink protocol.
 * The class should be coded to handle responses from service providers to which
 * the application sends service requests.
 * 
 * Note that there is only one delegate, that
 * handles all service responses received by the application.
 *
 */
@property (GD_NSNULLABLE_PROP weak, getter = getDelegate, setter = setDelegate:) id<GDServiceClientDelegate> delegate;

@end

/** AppKinetics service provider implementation.
 * 
 * Service requests received within the AppKinetics system are handled
 * by creating a class that implements this
 * protocol. Implementation is mandatory for
 * applications that provide services. An instance of the class must be set as
 * the observer for inbound service requests, by
 * setting the <tt>delegate</tt> property
 * of the application's \reflink GDService GDService \endlink instance.
 * 
 * This class also includes a callback that is invoked when transmission of a
 * service response completes.
 * 
 * This class is part of the service provider side of the AppKinetics
 * programming interface.
 *
 * <h3>Callback Invocation Sequence</h3>
 * The callbacks in this class will be invoked in the following sequence when a
 * service request is received.
 * -# \link GDServiceDelegate::GDServiceWillStartReceivingFrom:numberOfAttachments:forRequestID:
 *    GDServiceWillStartReceivingFrom:numberOfAttachments:forRequestID:\endlink
 *    once, if the service request has any file attachments.
 * -# \link GDServiceDelegate::GDServiceWillStartReceivingFrom:attachmentPath:fileSize:forRequestID:
 *    GDServiceWillStartReceivingFrom:attachmentPath:fileSize:forRequestID:\endlink
 *    once for each file attachment.
 * -# \reflink GDServiceDelegate::GDServiceDidReceiveFrom:forService:withVersion:forMethod:withParams:withAttachments:forRequestID: GDServiceDidReceiveFrom \endlink once.
 * .
 * The first two of these callbacks enable the application to display a
 * receiving status in its user interface. No action should be taken on any
 * attachment files until the last callback,
 * \reflink GDServiceDelegate::GDServiceDidReceiveFrom:forService:withVersion:forMethod:withParams:withAttachments:forRequestID: GDServiceDidReceiveFrom \endlink.
 * 
 * @see The \reflink GDService GDService class reference\endlink for:
 * - An overall description of AppKinetics.
 * - A list of requirements for applications that provide services, under
 *   Service Provider Requirements
 * .
 */
@protocol GDServiceDelegate<NSObject>

@required
/** Service request callback.
 * 
 * This callback is invoked when a service request is sent to the
 * application within the AppKinetics system. The parameters with which this
 * function is called give the details of the service request.
 *
 * For an overall description of AppKinetics see the \reflink GDService GDService class reference\endlink.
 *
 * See under Callback Invocation Sequence, above, for the position of this
 * callback in the order of service request callbacks.
 * 
 * When this callback is invoked, the application must:
 * -# Check that the service request is valid.
 * -# Process the request, if valid.
 * -# If required by the service definition or other published interface,
 *    respond to the request with a success or failure result by calling the
 *    \reflink GDService::replyTo:withParams:bringClientToFront:withAttachments:requestID:error: replyTo (GDService) \endlink function.
 * .
 * If the application determines that a service request is invalid then the
 * application should return an error in the <tt>replyTo</tt> call. For some
 * check failures, the application must set a particular code in the returned
 * error. These are documented in the Parameters section, below.
 * @see \reflink  iccerrors AppKinetics Errors \endlink.
 *
 * @param application <tt>NSString</tt> containing the native application identifier of
 *                    the consumer application that sent the service request.
 *                    The application is not required to check the value, but
 *                    may do so. For example, the application could be coded
 *                    only to process service requests from a known set of
 *                    consumer applications, and to fail requests from unknown
 *                    applications.
 *
 * @param service <tt>NSString</tt> containing the identifier of the service being
 *                requested. The application must check the value. If the
 *                application does not offer the requested service then the
 *                <tt>GDServicesErrorServiceNotFound</tt> code must be set.
 *
 * @param version <tt>NSString</tt> containing the version identifier of the service
 *                being requested. The application must check the value. If the
 *                application does not offer the requested service version then
 *                the <tt>GDServicesErrorServiceVersionNotFound</tt> code
 *                must be set.
 *
 * @param method <tt>NSString</tt> containing the name of the method within the service
 *               request. The application must check the value. If the
 *               application does not offer the requested method then the
 *               <tt>GDServicesErrorMethodNotFound</tt> code must be set.
 *
 * @param params The service parameters in the request, sent by the consumer
 *               application. See under Service Parameters in the
 *               \reflink GDService GDService class reference\endlink. If the service parameters are in some
 *               way invalid then a service-specific error code could be set, or
 *               this could be handled in some other way according to the
 *               service definition.
 *
 * @param attachments <tt>NSArray</tt> of <tt>NSString</tt>
 *                    objects containing the paths of files that were attached
 *                    to the service request. See under File Attachments in the
 *                    \reflink GDService GDService class reference\endlink. If the file attachments are in
 *                    some way invalid then a service-specific error code could
 *                    be set in the results object, or this could be handled in
 *                    some other way according to the service definition.
 * 
 * @param requestID <tt>NSString</tt> containing the unique identifier assigned to this
 *                  service request by the AppKinetics system. The application
 *                  must pass this value as the <tt>requestID</tt> parameter in
 *                  the \reflink GDService::replyTo:withParams:bringClientToFront:withAttachments:requestID:error: replyTo (GDService) \endlink call if it responds to the
 *                  request.
 */
- (void) GDServiceDidReceiveFrom:(NSString*)application
                      forService:(NSString*)service
                     withVersion:(NSString*)version
                       forMethod:(NSString*)method
                      withParams:(id)params
                 withAttachments:(GD_NSArray(NSString *) *)attachments
                    forRequestID:(NSString*)requestID;

@optional

/** Service response file attachment transmission start callback.
 * 
 * This callback is invoked when delivery of a service response file
 * attachment by the AppKinetics system starts. The path of the file is passed
 * as a parameter.
 *
 * Invocation of this callback notifies the application that the AppKinetics
 * system has started transferring the data in the file to the recipient of the
 * service response.
 *
 * The function that is invoked could display a sending status in its user
 * interface. The sending status could be cleared on receipt of the
 * <tt>GDServiceDidFinishSendingTo:</tt>
 * callback.
 *
 * @see \reflink GDService::replyTo:withParams:bringClientToFront:withAttachments:requestID:error: replyTo (GDService) \endlink for details of sending a service response.
 *
 * @param application <tt>NSString</tt> containing the native application identifier of
 *                    the recipient of the file.
 *
 * @param filename <tt>NSString</tt> containing the path in the secure store of the
 *                 file that is now being sent.
 *
 * @param requestID <tt>NSString</tt> containing the unique ID of the original service
 *                  request, the response to which the file is attached.
 */
- (void) GDServiceDidStartSendingTo:(NSString*)application withFilename:(NSString*)filename correspondingToRequestID:(NSString*)requestID;

/** Service response transmission complete callback.
 * 
 * This callback is invoked when delivery of an AppKinetics service
 * response completes.
 *
 * Invocation of this callback notifies the application that:
 * - Any files that were attached to the service response have been copied to
 *   the secure store of the service consumer.
 * - An independent copy of the parameters of the response, if any, has been
 *   made available to the service consumer.
 * .
 * The function that is invoked can delete or modify any of the original
 * file attachments, and free any resources used to hold the response
 * parameters.
 *
 * @see \reflink GDService::replyTo:withParams:bringClientToFront:withAttachments:requestID:error: replyTo (GDService) \endlink for details of sending service responses.
 * 
 * @param requestID <tt>NSString</tt> containing the unique identifier of the service
 *                  request to which the sending of the response has completed.
 * 
 * @param attachments <tt>NSArray</tt> of <tt>NSString</tt>
 *                    objects containing the paths of any files that were
 *                    attached to the service response.
 *
 * @param params Reference to the parameters object of the service response.
 *
 * @param application <tt>NSString</tt> containing the native application identifier of
 *                    the application to which the service response was sent.
 */
- (void) GDServiceDidFinishSendingTo:(NSString*)application withAttachments:(GD_NSArray(NSString *) *)attachments withParams:(id)params correspondingToRequestID:(NSString*)requestID;

@optional
/** Service request file attachments transmission start callback.
 * 
 * This callback is invoked when file attachments are about to be
 * received through the AppKinetics system. The number of files that are about
 * to be received is passed as a parameter.
 *
 * This callback will be invoked once per service request that has attachments.
 * See under Callback Invocation Sequence, above, for its position in the order
 * of service request callbacks.
 * 
 * The function that is invoked could display a receiving status in its user
 * interface. The status could be cleared on receipt of the
 * \reflink GDServiceDelegate::GDServiceDidReceiveFrom:forService:withVersion:forMethod:withParams:withAttachments:forRequestID: GDServiceDidReceiveFrom \endlink callback.
 * 
 * @param application <tt>NSString</tt> containing the native application identifier of
 *                    the consumer application that sent the service request to
 *                    which the files are attached.
 *
 * @param attachments
 *         <tt>NSUInteger</tt> number of files that are
 *         about to be received, always one or more. This callback isn't invoked
 *         for service requests that have no attachments.
 *
 * @param requestID <tt>NSString</tt> containing the unique identifier of the service
 *                  request to which the files are attached.
 */
- (void) GDServiceWillStartReceivingFrom:(NSString*)application
                     numberOfAttachments:(NSUInteger)attachments
                            forRequestID:(NSString*)requestID;

@optional
/** Service request individual file attachment transmission start callback.
 * 
 * This callback is invoked when an individual file attachment is about
 * to be received through the AppKinetics system. The path and size of the file
 * that is about to be received are passed as parameters.
 *
 * This callback will be invoked once per attachment. See under Callback
 * Invocation Sequence, above, for its position in the order of service request
 * callbacks.
 *
 * The function that is invoked could display a receiving status in its user
 * interface. The status could be cleared on receipt of the
 * \reflink GDServiceDelegate::GDServiceDidReceiveFrom:forService:withVersion:forMethod:withParams:withAttachments:forRequestID: GDServiceDidReceiveFrom \endlink callback.
 * 
 * @param application <tt>NSString</tt> containing the native application identifier of
 *                    the consumer application that sent the service request to
 *                    which the file is attached.
 *                    
 * @param path <tt>NSString</tt> containing the path of the attachment. The value will
 *             be the same as one of the elements in the <tt>attachments</tt>
 *             parameter passed to the subsequent
 *             \reflink GDServiceDelegate::GDServiceDidReceiveFrom:forService:withVersion:forMethod:withParams:withAttachments:forRequestID: GDServiceDidReceiveFrom \endlink invocation.
 *
 * @param size <tt>NSNumber</tt> representing the size 
 *             of the file in bytes. The value will be an <tt>unsigned
 *             long long</tt>.
 *
 * @param requestID <tt>NSString</tt> containing the unique identifier of the service
 *                  request to which the file is attached.
 */
- (void) GDServiceWillStartReceivingFrom:(NSString*)application
                          attachmentPath:(NSString*)path
                                fileSize:(NSNumber*)size
                            forRequestID:(NSString*)requestID;

@end

/** AppKinetics service provider.
 * 
 * This class is mandatory for service provider applications within the
 * AppKinetics system. This class also includes the programming interface for
 * sending AppKinetics service responses. This interface would be utilized in
 * the code of the delegate of this class.
 * 
 * 
 * For an overall description of AppKinetics, see below.
 * To utilize this programming interface, the application must meet the
 * requirements listed under Service Provider Requirements.
 *
 * The functions in the AppKinetics programming interface utilize <tt>NSError</tt> in a conventional way. Function calls accept as a parameter the location of a pointer to <tt>NSError</tt>, i.e. a pointer to a pointer, with type <tt>NSError**</tt>. The location may be <tt>nil</tt>. If the location isn't <tt>nil</tt>, and an error occurs, the BlackBerry Dynamics runtime overwrites the pointer at the specified location with the address of an object that describes the error that occurred.
 * 
 * The functions in this interface cannot be used until BlackBerry Dynamics
 * authorization processing is
 * complete, see under \reflink GDiOS::authorize: authorize (GDiOS) \endlink.
 * 
 * @see \reflink  iccerrors AppKinetics Errors \endlink
 * @see \reflink GDServiceClient GDServiceClient \endlink for the parts of the interface that are specific
 *      to service consumers.
 * @see \reflink GDiOS::getServiceProvidersFor:andVersion:andServiceType: getServiceProvidersFor: (GDiOS) \endlink for the service discovery programming
 *      interface.
 * 
 * <h3>AppKinetics</h3>
 * 
 * AppKinetics is a means of exchanging data and commands securely between two
 * BlackBerry Dynamics applications running on the same mobile device or
 * computer. The security of data isn't compromised during exchange.
 *
 * AppKinetics interactions follow a service consumer-provider model. One
 * application initiates communication by sending a service request to another.
 * The initiating application is the service consumer. The application that
 * receives the request is the service provider.
 *
 * After receiving the service request, the provider executes the necessary
 * processing and could then send a service response back to the consumer. Both
 * the service request and the service response, if any, can contain a number of
 * parameters and file attachments. See under Service Parameters and File
 * Attachments, below.
 *
 * The sequence of programming interfaces used in a typical AppKinetics
 * interaction is as follows.
 * -# The consumer application executes a service discovery query, by calling
 *    \reflink GDiOS::getServiceProvidersFor:andVersion:andServiceType: getServiceProvidersFor: (GDiOS) \endlink.
 * -# The consumer application calls \reflink GDServiceClient::sendTo:withService:withVersion:withMethod:withParams:withAttachments:bringServiceToFront:requestID:error: sendTo (GDServiceClient) \endlink.
 * -# The \reflink GDServiceDelegate::GDServiceDidReceiveFrom:forService:withVersion:forMethod:withParams:withAttachments:forRequestID: GDServiceDidReceiveFrom \endlink callback in the provider
 *    application is invoked by the AppKinetics system.
 * -# The provider application executes any required processing and then calls
 *    \reflink GDService::replyTo:withParams:bringClientToFront:withAttachments:requestID:error: replyTo (GDService) \endlink.
 * -# The \reflink GDServiceClientDelegate::GDServiceClientDidReceiveFrom:withParams:withAttachments:correspondingToRequestID: GDServiceClientDidReceiveFrom \endlink callback in the
 *    consumer is invoked by the AppKinetics system.
 * .
 * Note that an AppKinetics interaction can be initiated with any BlackBerry
 * Dynamics application whose native application identifier is known in the
 * service consumer. The identifier could be known by being present in the
 * application code or, as shown in the above, could be obtained at run time by
 * using BlackBerry Dynamics service discovery.
 *
 * Note that the service provider does not necessarily send a response, i.e. the
 * call to <tt>replyTo</tt> and subsequent invocation of the callback in the
 * consumer do not necessarily take place. The service definition specifies when
 * and whether the provider sends a response, see under Service Definition,
 * below.
 * 
 * The data for requests and responses is sent across a secure connection. The
 * connection is established and maintained as necessary by the BlackBerry
 * Dynamics runtime. This is transparent to the applications, although not
 * always to the end user because the user interface may sometimes "flip"
 * between applications during AppKinetics interaction. See also the Foreground
 * Execution section, below.
 *
 * AppKinetics cannot be used in
 * \ref enterprisesimulation.
 *
 * <h3>Service Definition</h3>
 * A service provided by an application may conform to a declared service
 * definition. The declaration, if there is one, will specify the following.
 * - Identifier and version of the service, conventionally a reversed Internet
 *   domain followed by a number of sub-domains separated by full stops
 *   (periods). Formally, service identifiers conform to the &lt;subdomain&gt;
 *   format defined in section 2.3.1 of <a
       HREF="http://www.ietf.org/rfc/rfc1035.txt"
       target="_blank"
    >RFC1035</a>.
 * - Methods that comprise the service.
 * - Expected parameters to service requests, per method.
 * - Expected file attachments to service requests, per method.
 * - Whether and in what circumstances service responses will be issued, per
 *   method.
 * - What types of service response will be issued, per method.
 * - Expected parameters to service responses, per method and per type.
 * - Expected file attachments to service responses, per method and per type.
 * - Error conditions that are specific to the service.
 * .
 * An application that registers as providing a service for which there is a
 * definition must adhere to the definition. Similarly, an application that
 * consumes a service that is based on a declared definition should only send
 * requests that conform to the definition. 
 * 
 * The service definition for a public service may be published to the
 * BlackBerry Dynamics application developer portal. The published definition
 * may include a link to additional reference documentation for the service. In
 * any case, the reference documentation may be obtained from the developer of a
 * service provider application, or from the creator of the service definition.
 *
 * @see \ref ICCServiceDefinition for a description of BlackBerry Dynamics
 *      service definition.
 *
 * <h3>Service Parameters</h3>
 * An AppKinetics service request can include a number of parameters, sent by
 * the consumer. Service responses can also include parameters, sent by the
 * provider to convey detailed results to the consumer. The parameters in a
 * request or response are always provided to the application as a single
 * object. AppKinetics supports a number of types of service parameter object.
 * 
 * BlackBerry Dynamics service definitions declare the expected types of
 * parameter object for requests and responses for each method in a service. The
 * BlackBerry Dynamics service definition language uses platform-independent
 * terms for the declaration. The terms, and the native types that would be used
 * to represent a parameter of that type, are listed in the following table.
 * <table>
 *     <tr><th>
 *         Service Definition</th>
 *     <th>
 *         Native</th>
 *     </tr><tr><td>
 *         string</td>
 *     <td>
 *         <tt>NSString</tt></td>
 * 
 *     </tr><tr><td>
 *         number</td>
 *     <td>
 *         <tt>NSNumber</tt></td>
 *
 *     </tr><tr><td>
 *         integer</td>
 *     <td>
 *         <tt>NSNumber</tt></td>
 *
 *     </tr><tr><td>
 *         boolean</td>
 *     <td>
 *         <tt>NSNumber</tt></td>
 *
 *     </tr><tr><td>
 *         null</td>
 *     <td>
 *         <tt>NSNull</tt></td>
 *
 *     </tr><tr><td>
 *         UInt8Array</td>
 *     <td>
 *         <tt>NSData</tt></td>
 *
 *     </tr><tr><td>
 *         array</td>
 *     <td>
 *         <tt>NSArray</tt> of any of the
 *         simple types listed above.</td>
 *
 *     </tr><tr><td>
 *         object</td>
 *     <td>
 *         <tt>NSDictionary</tt> of key-value
 *         pairs, with any of the above types as values.</td>
 * 
 *     </tr>
 *  </table>
 *
 * Note that the service identifier, version, and method name are not service
 * parameters as such and are not included in the parameters object.
 *
 * Error responses can include additional details of the error condition. For
 * example, if a parameter exceeds a maximum value, then the additional details
 * could include the value of the maximum. Additional details are specified in
 * the service definition, per condition, in the same way as service parameters.
 * Additional detail values are handled as 
 * entries in the <tt>userInfo</tt> dictionary in an <tt>NSError</tt> object.
 * 
 * <h3>File Attachments</h3>
 * An AppKinetics service request can include a number of file attachments
 * specified by the consumer. Service responses can also include file
 * attachments, if these are sent by the provider as results.
 *
 * File attachments are sent from the secure store of one application, and
 * copied to the secure store of the other application. Deletion of the
 * recipient's copy of the file is the responsibility of the recipient
 * application. The AppKinetics system doesn't delete copies of files that were
 * attached to a request or response.
 *
 * In the programming interface, the sending application specifies file
 * attachments as paths in its secure store. The AppKinetics system copies the
 * files to the receiving application's secure store, and then invokes a
 * callback in the receiving application. The callback is passed the paths of
 * the copies, which it can then open in the usual manner.
 *
 * The AppKinetics system uses the following naming convention to construct the
 * paths of the receiving application's copies.\n
 * <em>Inbox Directory</em><tt>/</tt>
 * <em>Sender</em><tt>/</tt>
 * <em>Reference time</em><tt>/</tt>
 * <em>Original Path</em>\n
 * Where:\n
 * <em>Sender</em> is the native application identifier of the sending
 * application.\n
 * <em>Reference time</em> is the date and time at which the AppKinetics system
 * started handling the file attachments, down to a millisecond resolution.
 *
 * Note that all the files attached to a particular service request or response
 * will be placed under one directory. This means that the receiving application
 * can delete all these files in a single operation, by deleting the directory.
 *
 * The AppKinetics system supports the sending of empty files in the current
 * release, but did not in some earlier releases.
 * 
 * @see \reflink  GDFileManager \endlink for the secure file system programming
 *      interface.
 *
 * <h3>Foreground Execution</h3>
 * An AppKinetics service request can specify a preference that the application
 * that provides the service executes in foreground in order to process the
 * request. This could be used when request processing always requires user
 * interaction, for example if the service is a special web browser or document
 * editor. See the <tt>option</tt> parameter of the
 * \reflink GDServiceClient::sendTo:withService:withVersion:withMethod:withParams:withAttachments:bringServiceToFront:requestID:error: sendTo (GDServiceClient) \endlink function.
 *
 * Similarly, an AppKinetics service response can specify a preference that the
 * service consumer application executes in foreground in order to process the
 * response. This might be used to return the original application to the
 * foreground. See the <tt>option</tt> parameter of the \reflink GDService::replyTo:withParams:bringClientToFront:withAttachments:requestID:error: replyTo (GDService) \endlink
 * function.
 *
 * It is also possible that a service provider itself determines its need to
 * execute in foreground in order to process a particular request, after the
 * request has been received. This is supported in AppKinetics by use of the
 * <em>front request </em>programming interface.
 *
 * The front request interface has two parts: send and receive. In principle,
 * any BlackBerry Dynamics application can send a front request to any other
 * BlackBerry Dynamics application, and any BlackBerry Dynamics application
 * could receive a front request from any other BlackBerry Dynamics application.
 * In practice, a front request is only sent to the consumer of a service by the
 * provider of the service.
 *
 * The following scenario illustrates the typical sequence of events in which
 * front request is utilized.
 * -# Service consumer application sends a request that is to be executed in
 *    background.
 * -# Service provider application receives the request but determines that
 *    processing can only take place in foreground.
 * -# Service provider sends a front request to the service consumer. See under
 *    Front Request Programming Interface, below, for details.
 * -# Service consumer receives the front request. See under Front Request
 *    Programming Interface, below, for details.
 * -# Service consumer brings the provider to the foreground, by calling the
 *    \reflink GDServiceClient::bringToFront:completion:error: bringToFront: \endlink function.
 * -# Service provider completes processing of the original request.
 * .
 * Note that the service consumer could also leave the provider in background,
 * in which case the service request would be expected to fail in some way.
 *
 * A service provider might need to process a service request in foreground
 * because:
 * - User interaction is necessary, and this wasn't predicted in the service
 *   consumer before the service request was sent.
 * - The time needed to process the request exceeds the time that is likely to
 *   be allowed to the provider to run in background.
 * .
 *
 * In general, only the application that is currently running in foreground can
 * bring another application to the foreground. In the scenario that neither the
 * service consumer nor provider are in foreground, for example because the user
 * chose to take a call or started a third application, then neither application
 * can be brought to foreground by the other.
 * 
 * <h3>Front Request Programming Interface</h3>
 * The programming interface for front request is defined as a BlackBerry
 * Dynamics service within AppKinetics.
 *
 * The formal service definition of front request is as follows.
 * \code
 * {
 *     "service-id": "com.good.gd.icc",
 *     "version": "1.0.0.0",
 *     "title": "ICC Service ",
 *     "description": "ICC is a special Good Dynamics service created by Good
 * Technology. This service is for control of the Inter-Container Communication
 * channel.",
 *     "methods": {
 *         "FRONT_REQ": {
 *             "description": "The service consumer calls this method to request
 * that the service provider places the service consumer in foreground."
 *         }
 *     }
 * }
 * \endcode
 *
 * To send a front request, then, an application calls the 
 * <tt>sendTo:</tt> function, with the following
 * parameter values.
 * - <tt>sendTo:</tt> the native application
 *   identifier of the other application, which typically will have been
 *   supplied in a
 *   <tt>GDServiceDidReceiveFrom:</tt>
 *   invocation resulting from the original service request.
 * - <tt>withService:</tt> the
 *   <tt>GDFrontRequestService</tt> constant, which always has the
 *   <tt>service-id</tt> value in the above.
 * - <tt>withVersion:</tt> <tt>"1.0.0.0"</tt>
 * - <tt>withMethod:</tt> <tt>"FRONT_REQ"</tt>.
 * - <tt>withParams:</tt> <tt>nil</tt>.
 * - <tt>withAttachments:</tt> <tt>nil</tt>.
 * - <tt>bringServiceToFront:</tt>
 *   <tt>GDENoForegroundPreference</tt>.
 * - <tt>requestID:</tt> Location of a local pointer or <tt>nil</tt>, as for any
 *   call to <tt>sendTo:</tt>
 * - <tt>error:</tt> Location of a local pointer or <tt>nil</tt>, as for any
 *   call to <tt>sendTo:</tt>
 * .
 * This causes a front request to be sent through the AppKinetics system.
 *
 * The AppKinetics system will deliver the front request in the same way as any
 * other service request, by invoking a callback in the provider application to
 * which the request is addressed. Note that, in the typical case, the service
 * provider here will actually be the application that was originally the
 * service consumer. This means that any application that consumes a service
 * whose provider might send back a front request must itself be a provider of
 * the Front Request service. This includes meeting the generic requirements for
 * all service provider applications, which are detailed under Service Provider
 * Requirements, below.
 *
 * The invoked callback's application code for handling a front request service
 * request should be restricted to:
 * - Identifying the received service request as a front request.
 * - Any checks that are required to determine whether the application should
 *   yield foreground execution to the application that sent the front request.
 * - A call to the \reflink GDServiceClient::bringToFront:completion:error: bringToFront: \endlink function, to be
 *   executed if all checks pass.
 * .
 * A minimal handler would identify a front request, make no checks, and then
 * always call the \reflink GDServiceClient::bringToFront:completion:error: bringToFront: \endlink function.
 * 
 * Note that the front request service definition doesn't contain any service
 * responses nor errors so the application mustn't send any. If the application
 * code checks don't pass and foreground execution isn't to be yielded, then the
 * application need take no action.
 *
 * The following code snippet gives a simple utility function that could be
 * utilized in a callback as outlined above.
 * \code
 * + (BOOL)consumeFrontRequestService:(NSString*) serviceID forApplication:(NSString*) application forMethod:(NSString*) method withVersion:(NSString*)version
 * {
 *  if([serviceID isEqual:GDFrontRequestService] && [version isEqual:@"1.0.0.0"])
 *  {
 *      if([method isEqual:GDFrontRequestMethod])
 *      {
 *          [GDService bringToFront:application completion:^(BOOL success) { } error:nil];
 *          return YES;
 *      }
 *  }
 *  return NO;
 * }
 * \endcode
 *
 * <h3>Service Provider Requirements</h3>
 * The following requirements apply to BlackBerry Dynamics applications that are
 * service providers.
 *
 * <h4>Function as a service provider</h4>
 * To function as an AppKinetics service provider, a BlackBerry Dynamics
 * application must:
 * - Instantiate a single object of the <tt>GDSer</tt><tt>vice</tt> class.
 * - Set the
 *   <tt>delegate</tt> property to point
 *   to an object of a class that implements the
 *   <tt>GDServiceDelegate</tt>
 *   protocol, typically
 *   <tt>self</tt>.
 * - Register the AppKinetics URL type
 *   on the device. This will normally be achieved by utilizing the mandatory
 *   BlackBerry Dynamics build-time configuration, as detailed in the
 *   \reflink GDiOS \endlink class reference.
 * .
 * Note that an application that provides multiple services still instantiates
 * only a single object of this class. The delegate of the object handles
 * requests for all the services that the application provides.
 *
 * <h4>Returned by service discovery query</h4>
 * To be on the list returned by a service discovery query, an application must
 * be registered as a service provider. Register the application as a service
 * provider:
 * - In the enterprise management console, if an in-house application.
 * - Via the application developer portal, if a partner application.
 * .
 * In either user interface, enter the
 * native bundle identifier of the application, for example
 * "com.example.application.name". Different bundle identifiers can be entered
 * for different device types.
 * 
 * 
 * @see \reflink GDiOS::getServiceProvidersFor:andVersion:andServiceType: getServiceProvidersFor: (GDiOS) \endlink for details of the service discovery
 *      programming interface.
 */
@interface GDService : NSObject

/** Send a response or error message.
 * 
 * Call this function to respond to a consumer application from
 * which an AppKinetics service request has been received. The response can
 * include a results object and file attachments to be conveyed to the consumer
 * application. The results object will notify the consumer of the success or
 * failure of the request.
 * 
 * For an overall description of AppKinetics see the \reflink GDService GDService class reference\endlink.
 *
 * If the request failed for any reason, pass an <tt>NSError</tt> as the
 * results object. Populate the <tt>NSError</tt> with a suitable error code and
 * a <tt>localizedDescription</tt>. Add any additional data to the
 * <tt>userInfo</tt> dictionary. The error domain will be set by the BlackBerry
 * Dynamics runtime to be the same as the service identifier. See also the <a
 *     href="https://developer.apple.com/reference/foundation/nserror"
 *     target="_blank"
 * >NSError class reference</a> on the apple.com developer website.
 * 
 * If the request succeeded then pass a results object of a valid service
 * parameter type, as defined under Service Parameters in the
 * \reflink GDService GDService class reference\endlink.
 * 
 * @param application <tt>NSString</tt> containing the native application idenitifer of
 *                    the consumer, as supplied in the original service request.
 *
 * @param params <tt>NSObject</tt> for the results
 *               object.
 *
 * @param option <tt>GDTForegroundOption</tt> specifying the foreground execution preference
 *               after delivery of the response:\n
 *               <tt>GDEPreferPeerInForeground</tt> for the consumer application being in the
 *               foreground.\n
 *               <tt>GDEPreferMeInForeground</tt> for this application being in the
 *               foreground.\n
 *               <tt>GDENoForegroundPreference</tt> to specify that there is no
 *               preference.\n
 *               See also the notes under Foreground Execution in the
 *               \reflink GDService GDService class reference\endlink.
 *
 * @param attachments <tt>NSArray</tt> of <tt>NSString</tt>
 *                    objects containing the paths of files in the BlackBerry
 *                    Dynamics secure file system that are to be attached to the
 *                    response. See under File Attachments in the
 *                    \reflink GDService GDService class reference\endlink.
 *
 * @param requestID <tt>NSString</tt> containing the identifier of the service request
 *                  to which this is a response. The identifier will have been
 *                  passed as a parameter to the delegated handler that
 *                  implements the service.
 *
 *
 * @param error For returning an <tt>NSError</tt> object if an error occurs. If <tt>nil</tt>, no object will be returned. Note that this means errors that occur when attempting to deliver the response, and is <em>not </em> a reference to the results object.
 * @return <tt>YES</tt> if the response was accepted by the AppKinetics system.
 * @return <tt>NO</tt> otherwise. The <tt>error</tt> location, if provided, will
 *         be set to point to an <tt>NSError</tt> object with details of the
 *         error condition.
 */
+ (BOOL) replyTo:(GD_NSNULLABLE NSString*)application
      withParams:(GD_NSNULLABLE id)params
bringClientToFront:(GDTForegroundOption)option
 withAttachments:(GD_NSNULLABLE GD_NSArray(NSString *) *)attachments
       requestID:(NSString*)requestID
           error:(NSError**)error;

/** Bring another application to the foreground.
 *
 * Call this function to bring another application to the
 * foreground. This could be used when the application is a service provider, to
 * bring the service consumer back to the foreground without sending a response.
 * See under Foreground Execution in the \reflink GDService GDService class reference\endlink for details.
 * 
This function is asynchronous. Success or failure is returned by
 * invocation of a code block specified in the <tt>completion</tt> parameter.
 * The block will receive one parameter of type <tt>BOOL</tt> and should have no
 * return value. It may or may not be executed on the main thread.
 *
 * Don't use this function outside the context of service request
 * processing.
 *
 * @param application <tt>NSString</tt> containing the native application identifier of
 *                    the application to be brought to the foreground.
 *                    
 * @param completion Code block to execute when the operation completes or
 *                   fails. It receives one parameter:\n
 *                   <tt>YES</tt> if the other application was brought to the
 *                   foreground, based on the return code from the native
 *                   layer.\n
 *                   <tt>NO</tt> otherwise.
 *
 * @param error For returning an <tt>NSError</tt> object if an error occurs. If <tt>nil</tt>, no object will be returned.
 * @return <tt>YES</tt> if the <tt>completion</tt> code block will be invoked.
 * @return <tt>NO</tt> otherwise.
 */
+ (BOOL) bringToFront:(GD_NSNON_NULL NSString *)application completion:( void(^)(BOOL) )completion error:(NSError**)error;

/** Bring another application to the foreground (deprecated).
 *
 * \deprecated This function is deprecated and will be removed in a future
 * release. Use \reflink GDService::bringToFront:completion:error: GDService::bringToFront:completion:error: \endlink
 * instead.
 *
 * Call this function to bring another application to the
 * foreground. This could be used when the application is a service provider, to
 * bring the service consumer back to the foreground without sending a response.
 * See under Foreground Execution in the \reflink GDService GDService class reference\endlink for details.
 * 
Don't use this function outside the context of service request
 * processing.
 *
 * @param application <tt>NSString</tt> containing the native application identifier of
 *                    the application to be brought to the foreground.
 * @param error For returning an <tt>NSError</tt> object if an error occurs. If <tt>nil</tt>, no object will be returned.
 * @return <tt>YES</tt> if the specified application was brought to the foreground,
 *         based on the return code from the native layer.
 * @return <tt>NO</tt> otherwise.
 */
+ (BOOL) bringToFront:(GD_NSNON_NULL NSString *)application error:(NSError**)error DEPRECATE_BRINGTOFRONTWITHOUTCOMPLETION;

/** Handler that implements the services provided by the application.
 * 
 * When an AppKinetics service request is received, the BlackBerry
 * Dynamics runtime dispatches an event to an observer within the application.
 * Set this property to the observer object instance in the application.
 * 
 * The observer object must:
 * - Implement the \reflink GDServiceDelegate GDServiceDelegate \endlink 
 *   protocol.
 * - Process received service requests in accordance with the published
 *   interface of the service provided. The interface could be, for example, a
 *   BlackBerry Dynamics service definition.
 * .
 * The processing could include calling \reflink GDService::replyTo:withParams:bringClientToFront:withAttachments:requestID:error: replyTo (GDService) \endlink to issue a
 * service response.
 * 
 */
@property (GD_NSNULLABLE_PROP weak, getter = getDelegate, setter = setDelegate:) id<GDServiceDelegate> delegate;

@end

GD_NS_ASSUME_NONNULL_END

#endif
